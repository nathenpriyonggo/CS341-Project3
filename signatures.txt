#light

namespace FSharp



namespace ImageLibrary
    
    module Operations =
        
        val fixVal: value: int -> int
        
        val Sepia:
          width: int ->
            height: int ->
            depth: int ->
            image: (int * int * int) list list -> (int * int * int) list list
        
        val internsifyValues:
          r: int ->
            g: int ->
            b: int -> intensity: double -> channel: char -> int * int * int
        
        val IncreaseIntensity:
          width: int ->
            height: int ->
            depth: int ->
            image: (int * int * int) list list ->
            intensity: double -> channel: char -> (int * int * int) list list
        
        val FlipHorizontal:
          width: int ->
            height: int ->
            depth: int ->
            image: (int * int * int) list list -> (int * int * int) list list
        
        val Rotate180:
          width: int ->
            height: int ->
            depth: int ->
            image: (int * int * int) list list -> (int * int * int) list list
        
        val distance:
          r1: int * g1: int * b1: int -> r2: int * g2: int * b2: int -> float
        
        val processRow:
          row: (int * int * int) list ->
            nextRow: (int * int * int) list ->
            threshold: int -> (int * int * int) list
        
        val EdgeDetect:
          width: int ->
            height: int ->
            depth: int ->
            image: (int * int * int) list list ->
            threshold: int -> (int * int * int) list list

